import groovy.json.JsonSlurper
import java.nio.file.Paths
import java.util.regex.Matcher
import javax.inject.Inject

plugins {
    id "com.avast.gradle.docker-compose" version "0.10.10"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
}

group "org.nrg.xnat.containers"
version "1.7.7-ML-SNAPSHOT"

def manifest = file(hasProperty("manifest") ? property("manifest") : "manifest.json")
def json = new JsonSlurper().parse(manifest)

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

def baseDestination = "${json.base ? (json.base.startsWith(".") ? json.base : "./" + json.base) : "."}"
def destination = { path -> Paths.get(baseDestination, path).toString() }

class CopyConfiguration extends Copy {
    @Inject
    CopyConfiguration(def name, def destination, def references) {
        project.configurations.create(name) {
            transitive = false
        }

        from project.configurations.getByName(name)
        into destination

        references.each {
            Matcher matcher = it =~ /^([^ >]+)\s*->\s*([^ >]+)$/
            if (matcher.matches()) {
                def reference = matcher[0][1]
                def atoms = reference.split ':'
                project.dependencies.add name, reference
                rename "${atoms[1]}-${atoms[2]}\\.[^.]+\$", matcher[0][2]
            } else {
                project.dependencies.add name, it
            }
        }
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${project.version}"
}

json.findAll { !(it.key ==~ /^(base|version)$/) }.each { key, value ->
    String taskName = "copy${key.capitalize()}"
    String configName = "download${key.capitalize()}"
    def references = value instanceof List ? value : [value]
    tasks.create taskName, CopyConfiguration, configName, destination(key), references
}

task copyAll {
    dependsOn tasks.matching { Task task -> task instanceof CopyConfiguration }
}

composeBuild.dependsOn copyAll

if (!project.hasProperty("POSTGRES_GID")) {
    ext.POSTGRES_GID = "70"
}
if (!project.hasProperty("POSTGRES_UID")) {
    ext.POSTGRES_UID = "70"
}
if (!project.hasProperty("XNAT_GID")) {
    ext.XNAT_GID = "1001"
}
if (!project.hasProperty("XNAT_UID")) {
    ext.XNAT_UID = "1001"
}

dockerCompose {
    appOnly {
        startedServices = [ "activemq", "orthanc", "traefik", "xnat-db", "xnat-web" ]
        removeImages = "All"
    }
    tcpPortsToIgnoreWhenWaiting = [8104, 8144]
    buildAdditionalArgs = ["--build-arg", "POSTGRES_GID=${POSTGRES_GID}", "--build-arg", "POSTGRES_UID=${POSTGRES_UID}", "--build-arg", "XNAT_GID=${XNAT_GID}", "--build-arg", "XNAT_UID=${XNAT_UID}"]

}

defaultTasks "composeUp"

